(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),i=(n(0),n(88)),r={id:"recaptcha-v2",title:"reCAPTCHA v2",sidebar_label:"reCAPTCHA v2",slug:"/repcaptcha-v2"},c={unversionedId:"sign-in/recaptcha-v2",id:"sign-in/recaptcha-v2",isDocsHomePage:!1,title:"reCAPTCHA v2",description:"Problem",source:"@site/docs/sign-in/recaptcha-v2.md",slug:"/repcaptcha-v2",permalink:"/cookbook/docs/repcaptcha-v2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/sign-in/recaptcha-v2.md",version:"current",sidebar_label:"reCAPTCHA v2",sidebar:"docs",previous:{title:"Alternative Username",permalink:"/cookbook/docs/alternative-username"},next:{title:"reCAPTCHA v3",permalink:"/cookbook/docs/repcaptcha-v3"}},s=[{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[{value:"Sign In Widget (Self-Hosted)",id:"sign-in-widget-self-hosted",children:[]}]},{value:"Discussion",id:"discussion",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"problem"},"Problem"),Object(i.b)("p",null,"Google's ",Object(i.b)("a",{parentName:"p",href:"https://developers.google.com/recaptcha/intro"},"reCAPTCHA v2"),' can be an additional layer of security for your applications to protect against spam or abuse from potential "non-humans". However, due to the nature of widgets and the asynchronous nature of JavaScript, it can be difficult to coordinate both widgets to interact together.'),Object(i.b)("h2",{id:"solution"},"Solution"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Ensure your site key is registered to the correct type of reCAPTCHA version")),Object(i.b)("p",null,"This sample below provides details around the client-side verification. Though it's worth noting that Okta does have it's own threat detection engine (",Object(i.b)("a",{parentName:"p",href:"https://help.okta.com/en/prod/Content/Topics/Security/threat-insight/ti-index.htm"},"ThreatInsights"),") to prevent malicious attacks and spam on authentication evaluations."),Object(i.b)("h3",{id:"sign-in-widget-self-hosted"},"Sign In Widget (Self-Hosted)"),Object(i.b)("h4",{id:"simple-user-flow"},"Simple User Flow"),Object(i.b)("p",null,"We recommend this user flow as it's the simplest to implement and also prevents unwanted registration in the process."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Lands on Sign In Page"),Object(i.b)("li",{parentName:"ol"},"Display reCaptcha, Hide Sign In Widget"),Object(i.b)("li",{parentName:"ol"},"Validate reCaptcha"),Object(i.b)("li",{parentName:"ol"},"Display reCaptcha")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/6020066/109988046-22e14900-7cd5-11eb-8802-521ae4fc5e35.gif"},"Preview of Flow")),Object(i.b)("h4",{id:"html"},"HTML"),Object(i.b)("p",null,"Ensure a reCAPTCHA widget is available on the same page as the SIW container."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Make sure to import script with the correct parameters and ",Object(i.b)("inlineCode",{parentName:"p"},"async")," and ",Object(i.b)("inlineCode",{parentName:"p"},"defer")," attribute!"),Object(i.b)("pre",{parentName:"blockquote"},Object(i.b)("code",{parentName:"pre",className:"language-html"},'<script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit" async defer>\n'))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'\x3c!-- omitted boilerplate HTML --\x3e\n<div id="grecaptcha-widget"></div>\n<div id="okta-login-container"></div>\n')),Object(i.b)("h4",{id:"javascript"},"JavaScript"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"// This is the callback for when the user verifies themselves\nconst reCaptchaCallback = captchaToken => {\n    // captchaToken returns null if c\n    const isHuman = captchaToken;\n    if (isHuman) {\n        // Do something with the reCAPTCHA, hide, fade, etc.\n        // Show the sign in widget\n        oktaSignIn.showSignInToGetTokens();\n    }\n};\n\n// If you want include some logic for when reCAPTCAH is expired or errors\n// const expiredCallback = () => {};\n// const errorCallback = () => {};\n\n// This is the explicit reCAPTCHA render callback\nvar onloadCallback = () => {\n    let grecaptchaWidget = grecaptcha.render('grecaptcha-widget', {\n        sitekey: 'YOUR_SITE_KEY',\n        callback: reCaptchaCallback\n        // Optional Params\n        // 'expired-callback': expiredCallback,\n        // 'error-callback': errorCallback,\n        // size: compact || normal,\n        // theme: dark || light\n    });\n}\n")),Object(i.b)("h4",{id:"embedded-recaptcha-flow"},"Embedded reCAPTCHA Flow"),Object(i.b)("p",null,"While the simple flow is the preferred implementation, there are circumstances where you want to embed reCAPTCHA into the sign in widget. Note, this does require a more complex implementation and requires a bit of DOM manipulation."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"let grecaptchaWidget;\n\nvar onloadCallback = () => {\n    grecaptchaWidget = grecaptcha.render('captchaWidget', {\n        'sitekey' : 'YOUR_SITE_KEY',\n        'theme' : 'light'\n    });\n}\n\nconst oktaSignIn = new OktaSignIn({\n    // ... omitted other params\n    processCreds: (creds, authCallback) => {\n        // Check our widget \n        const isHuman = grecaptcha.getResponse(grecaptchaWidget);\n        if (isHuman) {\n            authCallback();\n        } else {\n            // Do something to notify potential users\n        }\n    }\n});\n\noktaSignIn\n    .showSignInToGetTokens()\n    .then(tokens => {\n        // store/use tokens\n    });\n\noktaSignIn\n    .on('ready', context => {\n        if (context.controller === 'primary-auth') {\n            // Get the widget container element\n            const container = document\n                .getElementById('okta-login-container');\n\n            // Get a reference to the submit button\n            const submitButton = container\n                .querySelector('input[type=\"submit\"]');\n            \n            // Get the parentNode in order to insert before the submit button\n            const submitContainer = submitButton.parentNode;\n\n            // Create a captcha widget element\n            const captchaEl = document.createElement('div')\n            captchaEl.setAttribute('id', 'captchaWidget');\n\n            // Insert the captcha element\n            submitContainer.insertBefore(captchaEl, submitButton);\n\n            // You may also want to add a disable attribute and visually\n            // change how the submit button appears for a better UX\n        }\n    });\n")),Object(i.b)("h2",{id:"discussion"},"Discussion"),Object(i.b)("p",null,"It's important to mention that the embedded flow can be rather difficult when combining it with a modern front-end framework especially with a virtual DOM. Thus, you'll want to make sure to perform your logic within your encapsulated / wrapper over the widget."))}p.isMDXComponent=!0}}]);